"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkbloxu_browser"] = self["webpackChunkbloxu_browser"] || []).push([["services_creature_pub_index_ts"],{

/***/ "../components/messaging/pub/Channel.ts":
/*!**********************************************!*\
  !*** ../components/messaging/pub/Channel.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Channel)\n/* harmony export */ });\n/* harmony import */ var _messaging_pub_MessageFactory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../messaging/pub/MessageFactory */ \"../components/messaging/pub/MessageFactory.ts\");\n/* harmony import */ var _messaging_pub_SyncMessenger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../messaging/pub/SyncMessenger */ \"../components/messaging/pub/SyncMessenger.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n/**\n * Provides a more clean and convenient interface for\n * dealing with messaging to/from a specific destination.\n */\nclass Channel {\n    constructor(clientId, targetId, messenger) {\n        this.clientId = clientId;\n        this.targetId = targetId;\n        this.messenger = messenger;\n        this.syncMessenger = new _messaging_pub_SyncMessenger__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.messenger);\n        this.messageFactory = new _messaging_pub_MessageFactory__WEBPACK_IMPORTED_MODULE_0__[\"default\"](clientId);\n    }\n    /**\n     * Sends a request message to the target.\n     * Returns a promise that is fulfilled with the response of the target.\n     */\n    request(method_1) {\n        return __awaiter(this, arguments, void 0, function* (method, args = []) {\n            return yield (this.syncMessenger.postSyncMessage(this.messageFactory.createRequest(this.targetId, method, args)));\n        });\n    }\n    /**\n     * Sends an event message to the target.\n     */\n    sendEvent(eventName, args = []) {\n        this.messenger.postMessage(this.messageFactory.createEvent(this.targetId, eventName, args));\n    }\n}\n\n\n//# sourceURL=webpack://bloxu-browser/../components/messaging/pub/Channel.ts?");

/***/ }),

/***/ "../services/creature/pub/Creature.ts":
/*!********************************************!*\
  !*** ../services/creature/pub/Creature.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Creature)\n/* harmony export */ });\n/* harmony import */ var _components_messaging_pub_ProxyMessenger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../components/messaging/pub/ProxyMessenger */ \"../components/messaging/pub/ProxyMessenger.ts\");\n/* harmony import */ var _components_messaging_pub_Channel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../components/messaging/pub/Channel */ \"../components/messaging/pub/Channel.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n/**\n * Class that contains the operations and state\n * of the Creature service.\n */\nclass Creature {\n    constructor(id, bodyType, otherServiceIdMap = { world3d: \"world3d\" }) {\n        this.id = id;\n        this.bodyType = bodyType;\n        this.otherServiceIdMap = otherServiceIdMap;\n        this.paused = false;\n        this.eventHandlers = {\n            \"IOService:<event>changeDirection\": this.onChangeDirectionInput.bind(this),\n            \"IOService:<event>triggerPointer\": this.onTriggerPointerInput.bind(this),\n            \"IOService:<event>point\": this.onPointInput.bind(this),\n            \"IOService:<event>pressKey\": this.onPressKeyInput.bind(this),\n            \"IOService:<event>releaseKey\": this.onReleaseKeyInput.bind(this)\n        };\n        this.initialized = false;\n        this.spawned = false;\n        this.isAlive = true;\n        this.proxyMessenger = new _components_messaging_pub_ProxyMessenger__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n        this.world3dChannel = new _components_messaging_pub_Channel__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.id, this.otherServiceIdMap.world3d, this.proxyMessenger);\n        this.allChannel = new _components_messaging_pub_Channel__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.id, \"*\", this.proxyMessenger);\n        this.controlsDisabled = true;\n        this.disableEvents = false;\n    }\n    /**\n     * Id of the creature's body object in the world.\n     */\n    bodyId() {\n        return `Creature:CreatureBody?${this.id}`;\n    }\n    /**\n     * When the controller's pointer has changed position.\n     */\n    onPointInput(position, pointerIndex, controllerIndex) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.spawned) {\n                return;\n            }\n            if (this.controlsDisabled) {\n                return;\n            }\n            if (this.paused) {\n                return;\n            }\n            const stateUpdate = yield this.world3dChannel.request(\"control\", [this.bodyId(), \"point\", [position, pointerIndex]]);\n            this.allChannel.sendEvent(\"Creature:<event>controllerPoint\", [position, pointerIndex, controllerIndex, stateUpdate]);\n        });\n    }\n    /**\n     * When a pointer control has been pressed down (e.g. a mouse button).\n     */\n    onTriggerPointerInput(buttonIndex, pointerIndex, controllerIndex) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.spawned) {\n                return;\n            }\n            if (this.controlsDisabled) {\n                return;\n            }\n            if (this.paused) {\n                return;\n            }\n            const stateUpdate = yield this.world3dChannel.request(\"control\", [this.bodyId(), \"triggerPointer\", [buttonIndex, pointerIndex]]);\n            this.allChannel.sendEvent(\"Creature:<event>controllerTriggerPointer\", [buttonIndex, pointerIndex, controllerIndex, stateUpdate]);\n        });\n    }\n    /**\n     * When a key has been pressed down on the controller.\n     */\n    onPressKeyInput(key, keyControllerIndex, controllerIndex) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.spawned) {\n                return;\n            }\n            if (this.controlsDisabled) {\n                return;\n            }\n            if (this.paused) {\n                return;\n            }\n            const stateUpdate = yield this.world3dChannel.request(\"control\", [this.bodyId(), \"pressKey\", [key, keyControllerIndex]]);\n            this.allChannel.sendEvent(\"Creature:<event>controllerPressKey\", [key, keyControllerIndex, controllerIndex, stateUpdate]);\n        });\n    }\n    /**\n     * When a pressed down key has been released on the controller.\n     */\n    onReleaseKeyInput(key, keyControllerIndex, controllerIndex) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.spawned) {\n                return;\n            }\n            if (this.controlsDisabled) {\n                return;\n            }\n            if (this.paused) {\n                return;\n            }\n            const stateUpdate = yield this.world3dChannel.request(\"control\", [this.bodyId(), \"releaseKey\", [key, keyControllerIndex]]);\n            this.allChannel.sendEvent(\"Creature:<event>controllerReleaseKey\", [key, keyControllerIndex, controllerIndex, stateUpdate]);\n        });\n    }\n    /**\n     * Does what Creature wants to do when the controller's main\n     * direction control has changed (for example, the thumb joystick or WASD keys).\n     */\n    onChangeDirectionInput(direction, directionControllerIndex, controllerIndex) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.spawned) {\n                return;\n            }\n            if (this.controlsDisabled) {\n                return;\n            }\n            if (this.paused) {\n                return;\n            }\n            const stateUpdate = yield this.world3dChannel.request(\"control\", [this.bodyId(), \"changeDirection\", [direction, directionControllerIndex]]);\n            this.allChannel.sendEvent(\"Creature:<event>controllerChangeDirection\", [direction, directionControllerIndex, controllerIndex, stateUpdate]);\n        });\n    }\n    /**\n     * Initialization procedure for the LocalCreature service.\n     */\n    initialize() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.initialized = true;\n            return true;\n        });\n    }\n    /**\n     * Spawn the creature's body at the given position.\n     */\n    spawn(startingPosition) {\n        // Create the creature's body and the controller for the body.\n        this.world3dChannel.request(\"createObject\", [this.bodyId(), this.bodyType, [startingPosition, true]]);\n        this.world3dChannel.request(\"createController\", [\"CreatureBodyController\", this.bodyId()]);\n        if (!this.controlsDisabled) {\n            this.makeBodyCameraTarget();\n        }\n        this.spawned = true;\n        return true;\n    }\n    /**\n     * Spawns the creature again, after having been\n     * spawned previously. We assume that the creature's\n     * objects have been disposed of in World3D.\n     */\n    respawn(startingPosition) {\n        this.spawned = false;\n        return this.spawn(startingPosition);\n    }\n    /**\n     * Disables controls for the player.\n     */\n    disableControls() {\n        if (this.controlsDisabled)\n            return true;\n        this.onChangeDirectionInput({ x: 0, y: 0 }, 0, 0);\n        this.controlsDisabled = true;\n        return true;\n    }\n    /**\n     * Pauses the Creature service, making it temporarily\n     * halt its regular behavior.\n     */\n    pause() {\n        this.paused = true;\n        return true;\n    }\n    /**\n     * Undoes the effect of .pause()\n     */\n    resume() {\n        this.paused = false;\n        return true;\n    }\n    /**\n     * Enables controls for the creature.\n     */\n    enableControls() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.controlsDisabled)\n                return;\n            this.controlsDisabled = false;\n            if (this.spawned) {\n                yield this.makeBodyCameraTarget();\n            }\n        });\n    }\n    /**\n     * Makes the creature's body the centered target of the camera.\n     */\n    makeBodyCameraTarget() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const targetBody = function (bodyId) {\n                const body = this.getObject(bodyId);\n                this.camera.lockedTarget = body.transformNode;\n                this.camera.radius = 16;\n            };\n            this.world3dChannel.request(\"modify\", [{ boundArgs: [this.bodyId()], f: targetBody }]);\n        });\n    }\n}\n\n\n//# sourceURL=webpack://bloxu-browser/../services/creature/pub/Creature.ts?");

/***/ }),

/***/ "../services/creature/pub/RemoteCreature.ts":
/*!**************************************************!*\
  !*** ../services/creature/pub/RemoteCreature.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RemoteCreature)\n/* harmony export */ });\n/* harmony import */ var _Creature__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Creature */ \"../services/creature/pub/Creature.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n/**\n * A Creature that is controlled remotely by another online creature.\n */\nclass RemoteCreature {\n    constructor(id, bodyId) {\n        this.id = id;\n        this.creature = new _Creature__WEBPACK_IMPORTED_MODULE_0__[\"default\"](id, bodyId);\n        this.creature.controlsDisabled = true;\n        this.creature.disableEvents = true;\n        this.proxyMessenger = this.creature.proxyMessenger;\n        this.eventHandlers = {\n            \"OnlineSynchronizer:Creature:<event>controllerPoint\": this.onHostControllerPoint.bind(this),\n            \"OnlineSynchronizer:Creature:<event>controllerTriggerPointer\": this.onHostTriggerPointer.bind(this),\n            \"OnlineSynchronizer:Creature:<event>controllerPressKey\": this.onHostPressKey.bind(this),\n            \"OnlineSynchronizer:Creature:<event>controllerReleaseKey\": this.onHostReleaseKey.bind(this),\n            \"OnlineSynchronizer:Creature:<event>controllerChangeDirection\": this.onHostChangeDirection.bind(this),\n        };\n    }\n    bodyId() {\n        return this.creature.bodyId();\n    }\n    /**\n     * Initialize RemoteCreature service.\n     */\n    initialize() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.creature.initialize();\n        });\n    }\n    pause() {\n        return this.creature.pause();\n    }\n    resume() {\n        return this.creature.resume();\n    }\n    spawn(startingPosition) {\n        // Create the player's body and the controller for the body.\n        this.creature.world3dChannel.request(\"createObject\", [this.creature.bodyId(), this.creature.bodyType, [startingPosition, false]]);\n        this.creature.world3dChannel.request(\"createRemoteController\", [\"RemoteCreatureBodyController\", this.creature.bodyId()]);\n        if (!this.creature.controlsDisabled) {\n            this.creature.makeBodyCameraTarget();\n        }\n        this.creature.spawned = true;\n        return true;\n    }\n    respawn(startingPosition) {\n        this.creature.spawned = false;\n        return this.spawn(startingPosition);\n    }\n    /**\n     * When the host Creature has called 'point' for its body's controller.\n     */\n    onHostControllerPoint(position, pointerIndex, controllerIndex, stateUpdate) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._callController(\"point\", [position, pointerIndex, stateUpdate]);\n        });\n    }\n    /**\n     * Handler for when the host Creature has called 'triggerPointer' for its body's controller.\n     */\n    onHostTriggerPointer(buttonIndex, pointerIndex, controllerIndex, stateUpdate) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._callController(\"triggerPointer\", [buttonIndex, pointerIndex, stateUpdate]);\n        });\n    }\n    /**\n     * Handler for when the host Creature has called 'pressKey' for its body's controller.\n     */\n    onHostPressKey(key, keyControllerIndex, controllerIndex, stateUpdate) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._callController(\"pressKey\", [key, keyControllerIndex, stateUpdate]);\n        });\n    }\n    /**\n     * Handler for when the host Creature has called 'releaseKey' for its body's controller.\n     */\n    onHostReleaseKey(key, keyControllerIndex, controllerIndex, stateUpdate) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._callController(\"releaseKey\", [key, keyControllerIndex, stateUpdate]);\n        });\n    }\n    /**\n     * Handler for when the host Creature has called 'changeDirection' for its body's controller.\n     */\n    onHostChangeDirection(direction, directionControllerIndex, controllerIndex, stateUpdate) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._callController(\"changeDirection\", [direction, directionControllerIndex, stateUpdate]);\n        });\n    }\n    /**\n     * Calls the RemoteController of the RemoteCreature.\n     */\n    _callController(methodName, args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.creature.spawned) {\n                return;\n            }\n            if (this.creature.paused) {\n                return;\n            }\n            const controlResult = yield this.creature.world3dChannel.request(\"remoteControl\", [this.creature.bodyId(), methodName, args]);\n        });\n    }\n}\n\n\n//# sourceURL=webpack://bloxu-browser/../services/creature/pub/RemoteCreature.ts?");

/***/ }),

/***/ "../services/creature/pub/index.ts":
/*!*****************************************!*\
  !*** ../services/creature/pub/index.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _components_browser_pub_WebWorker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../components/browser/pub/WebWorker */ \"../components/browser/pub/WebWorker.ts\");\n/* harmony import */ var _components_messaging_pub_MessagePipe__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../components/messaging/pub/MessagePipe */ \"../components/messaging/pub/MessagePipe.ts\");\n/* harmony import */ var _components_messaging_pub_MessengerClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../components/messaging/pub/MessengerClass */ \"../components/messaging/pub/MessengerClass.ts\");\n/* harmony import */ var _Creature__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Creature */ \"../services/creature/pub/Creature.ts\");\n/* harmony import */ var _RemoteCreature__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./RemoteCreature */ \"../services/creature/pub/RemoteCreature.ts\");\n\n\n\n\n\nfunction main() {\n    var worker = new _components_browser_pub_WebWorker__WEBPACK_IMPORTED_MODULE_0__[\"default\"](self);\n    // Wait for a spawn request.\n    worker.onMessage((msg) => {\n        const spawnRequestTypes = [\"beCreature\", \"beRemoteCreature\"];\n        if (msg.type === \"request\" && spawnRequestTypes.includes(msg.message.type)) {\n            var creature;\n            const bodyType = msg.message.args[0];\n            if (typeof bodyType !== \"string\") {\n                throw new Error(`No argument or incorrect argument was\r\n                    given for the creature's body type.`);\n            }\n            if (msg.message.type === \"beCreature\") {\n                creature = new _Creature__WEBPACK_IMPORTED_MODULE_3__[\"default\"](self.name, bodyType);\n                const enableControls = typeof msg.message.args[1] === \"boolean\" ?\n                    msg.message.args[1] : false;\n                if (enableControls)\n                    creature.enableControls();\n            }\n            else { // beRemoteCreature\n                creature = new _RemoteCreature__WEBPACK_IMPORTED_MODULE_4__[\"default\"](self.name, bodyType);\n            }\n            let creatureMessenger = new _components_messaging_pub_MessengerClass__WEBPACK_IMPORTED_MODULE_2__[\"default\"](creature, creature.proxyMessenger, self.name);\n            let pipe = new _components_messaging_pub_MessagePipe__WEBPACK_IMPORTED_MODULE_1__[\"default\"](worker, creatureMessenger);\n            pipe.join();\n        }\n    });\n}\nmain();\n\n\n//# sourceURL=webpack://bloxu-browser/../services/creature/pub/index.ts?");

/***/ })

}]);